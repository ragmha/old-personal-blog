<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://raghibm.com/</id>
    <title>🦄</title>
    <updated>2017-02-11T15:50:21Z</updated>
    <author>
        <name>Raghib</name>
        <email>abulm@metropolia.fi</email>
        <uri>https://raghibm.com/about</uri>
    </author>
    <link rel="alternate" href="https://raghibm.com"/>
    <subtitle>By Raghib Hasan — an open source developer interested in advanced JavaScript and everything λ</subtitle>
    <rights>All rights reserved  2017, Raghib Hasan</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[😎 Awesome ES6 Features]]></title>
        <id>https://raghibm.com/blog/awesome-ES6-features/</id>
        <link href="https://raghibm.com/blog/awesome-ES6-features/">
        </link>
        <updated>2017-02-06T22:00:00Z</updated>
        <summary type="html"><![CDATA[Refresh your ES6 with these examples 👊]]></summary>
        <content type="html"><![CDATA[<h2>&#x270A; Convert NodeList to Array:</h2>
<pre><code class="language-javascript">// Spread syntax - https://goo.gl/0elyOR

let Headings  = [...document.querySelectorAll(&apos;h1&apos;)];
</code></pre>
<h2>&#x270A; Convert Arguments to Array:</h2>
<pre><code class="language-javascript">// Spread syntax - https://goo.gl/0elyOR

let argsArray  = [...arguments];
</code></pre>
<h2>&#x1F984; Unique Arrays:</h2>
<pre><code class="language-javascript">// Spread syntax - https://goo.gl/0elyOR

// Set syntax - https://goo.gl/jwroxF

let array = [1,3,3,7];

let result = [...new Set(array)]; // =&gt; [1, 3, 7]
</code></pre>
<h2>&#x1F528; Destructuring:</h2>
<pre><code class="language-javascript">// Destructuring assignment syntax - https://goo.gl/vwd7C1

let {foo, bar} = {foo: &quot;lorem&quot;, bar: &quot;ipsum&quot;};

foo; // =&gt; lorem

bar; // =&gt; ipsum
</code></pre>
<h2>&#x1F693; Interpolate</h2>
<pre><code class="language-javascript">// Template literals #Expression interpolation - https://goo.gl/rnqz0a

let obj = { x: 1, y: 2 };

let result = console.log(`Your total is: ${obj.x + obj.y}`);

result; // =&gt; Your total is: 3
</code></pre>
<h2>&#x1F645; Swapping:</h2>
<pre><code class="language-javascript">// Destructuring assignment #Swapping variables - https://goo.gl/0ZQYtm

let x = 4;
let y = 2;

let [y1, x1] = [x , y];

y1; // =&gt; 4
x1; // =&gt; 2
</code></pre>
<h2>&#x1F50D; Finding Max in Array?</h2>
<pre><code class="language-javascript">// Spread syntax - https://goo.gl/0elyOR

// Math.max() syntax - https://goo.gl/AVXfW3

let arr = [1,4,32,10];

Math.max(...arr); // =&gt; 32
</code></pre>
<h2>&#x1F52A; <s>List comprehension:</s></h2>
<h3><code>[NOT COMPATIBLE with current browser, Only works on Firefox(Gecko)]</code></h3>
<pre><code class="language-javascript">// Array comprehensions syntax - https://goo.gl/PJn9ol

let numbers = [1, 2, 3, 4];

var doubled = [for (let i of numbers) i *2];

doubled; //=&gt; 2,4,6,8
</code></pre>
<h2>&#x270A; Map them!</h2>
<pre><code class="language-javascript">// Array.prototype.map() syntax - https://goo.gl/EEn7n6

let arr = [{id: 1, name:&apos;A&apos;}, {id: 2, name:&apos;B&apos;}, {id:3, name:&apos;C&apos;}];

arr.map(x =&gt; x.id); // =&gt; [1,2,3]
</code></pre>
<h2>&#x1F62E; <a href="http://Object.is">Object.is</a> ?</h2>
<pre><code class="language-javascript">// Object.is() syntax - https://goo.gl/2utt2F

let z = (x, y) =&gt; x === y || Object.is(x,y);

let obj1 = {
  id : 1
};

let obj2 = {
  id : 1
};

z(obj1, obj1); //=&gt; true
z(obj1, obj2); //=&gt; false
</code></pre>
<h2>&#x1F47B; Is it Hidden?</h2>
<pre><code class="language-javascript">// RegExp.prototype.test() syntax - https://goo.gl/aC3Snu

let isHidden = (file) =&gt; /^\.|~$/.test(file);

isHidden(&quot;.DS_STORE&quot;) //=&gt; true
</code></pre>
<h2>&#x1F914; Is it Included?</h2>
<pre><code class="language-javascript">// Array.prototype.includes() syntax - https://goo.gl/hkxraC

let arr = [1, 2, 3];

arr.includes(2); // =&gt; true &#x1F64C;

</code></pre>
<h2>&#x1F44B; What them entries ?</h2>
<pre><code class="language-javascript">// Object.entries() syntax - https://goo.gl/oSCIe1

let obj = {foo: &apos;bar&apos;, baz: 42};

let Entries = Object.entries(obj);

Entries; // =&gt; [[&apos;foo&apos;, &apos;bar&apos;], [&apos;baz&apos;,42]]

</code></pre>
<h2>&#x1F44B; What them values ?</h2>
<pre><code class="language-javascript">// Object.values() syntax - https://goo.gl/bR6thf

let obj = {foo: &apos;bar&apos;, baz: 42};

let Values = Object.values(obj);

Values; // =&gt; [&apos;bar&apos;, 42]

</code></pre>
<h2>&#x1F64F; Promise</h2>
<pre><code class="language-javascript">// Promise syntax - https://goo.gl/nBnJyq

let wait1000 = new Promise((resolve, reject) =&gt; {
  setTimeout(resolve,1000);
}).then(() =&gt; {
  console.log(&apos;Wohoo!! &#x1F64C;&apos;);
});

wait1000; // =&gt; after 1 sec Wohoo!! &#x1F64C;
</code></pre>
<h2>&#x1F50D; Find</h2>
<pre><code class="language-javascript">// Array.prototype.find() syntax - https://goo.gl/xB2vwU

let ages = [12, 19, 6, 4];

let firstAdult = ages.find(age =&gt; age &gt;= 18);

firstAdult; // =&gt; 19
</code></pre>
<h2>&#x1F50D; Find its <code>index</code></h2>
<pre><code class="language-javascript">// Array.prototype.findIndex() syntax - https://goo.gl/NFp858

let ages = [12, 19, 6, 4];

let firstAdultIndex = ages.find(age =&gt; age &gt;= 18);

firstAdultIndex; // =&gt; 1
</code></pre>
<figure><img src="https://raghibm.com/blog/awesome-ES6-features/http://33.media.tumblr.com/tumblr_lnd67mbWHl1ql201ao1_500.gif" alt="Hmmm....INTERESTING"><figcaption>Hmmm....INTERESTING</figcaption></figure>
<h2>Reference</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"><strong>MDN</strong></a></p>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[🚀 Deploy Create React App with Surge]]></title>
        <id>https://raghibm.com/blog/deploy-create-react-app-with-surge/</id>
        <link href="https://raghibm.com/blog/deploy-create-react-app-with-surge/">
        </link>
        <updated>2017-01-17T22:00:00Z</updated>
        <summary type="html"><![CDATA[Deploying a React app with Surge]]></summary>
        <content type="html"><![CDATA[<p>Deploying an app to Surge is insanely easy, and it&#x2019;s even free (including a custom domain and SSL).</p>
<p><strong>tldr;</strong></p>
<h3>Step1 : <code>Install create-react-app</code></h3>
<pre><code class="language-javascript">$ npm install -g create-react-app

$ create-react-app my-app
$ cd my-app/
$ npm start
</code></pre>
<figure><img src="https://raghibm.com/blog/deploy-create-react-app-with-surge/https://camo.githubusercontent.com/506a5a0a33aebed2bf0d24d3999af7f582b31808/687474703a2f2f692e696d6775722e636f6d2f616d794e66434e2e706e67" alt="Screenshot"><figcaption>Screenshot</figcaption></figure>
<h3>Step2 : <code>Install Surge</code></h3>
<pre><code class="language-javascript">$ npm install -g surge

</code></pre>
<h3>Step3: <code>Run the create-react-app build</code></h3>
<pre><code class="language-javascript">$ cd your-react-project
$ npm run build

</code></pre>
<h3>Step4: <code>Move to the build directory</code></h3>
<pre><code class="language-javascript">$ cd build
</code></pre>
<h3>Step5: <code>Run Surge</code> &#x1F44D;</h3>
<pre><code class="language-javascript">$ surge
</code></pre>
<h3>Step6: <code>Go the URL,automatically generated by surge</code> &#x1F389;&#x1F389;</h3>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[🚀 Getting started with express-react-views]]></title>
        <id>https://raghibm.com/blog/gettings-started-with-express-react-views/</id>
        <link href="https://raghibm.com/blog/gettings-started-with-express-react-views/">
        </link>
        <updated>2017-01-23T22:00:00Z</updated>
        <summary type="html"><![CDATA[Get up and running with express & react]]></summary>
        <content type="html"><![CDATA[<p>I am currently taking <a href="https://university.mongodb.com/courses/M101JS/about">M101JS</a> this year and having enough experience with <a href="https://facebook.github.io/react/">React</a>.
I&#x2019;ve decided to use <a href="https://github.com/reactjs/express-react-views">express-react-views</a> for some of the challenges during the 8 week course.There are of course other server-side view solution <a href="http://www.embeddedjs.com/">ejs</a>, <a href="https://pugjs.org/api/getting-started.html">pug</a> or <a href="https://github.com/barc/express-hbs">handlebars</a>.</p>
<h2>Step 1</h2>
<p>Create a directory named <code>myapp</code></p>
<pre><code class="language-javascipt">$ mkdir myapp
</code></pre>
<h2>Step 2</h2>
<p>change to the directory and run <code>npm init</code></p>
<pre><code class="language-javascipt">$ cd myapp
$ npm init
</code></pre>
<h2>Step 3</h2>
<p>Install the required <strong>dependencies</strong> <code>express</code>, <code>express-react-views</code>, <code>react</code> and <code>react-dom</code></p>
<pre><code class="language-javascipt">$&#xA0;npm install --save express express-react-views react react-dom

</code></pre>
<h2>Step 4</h2>
<p>In the <code>myapp</code> directory, create a file named <code>app.js</code> and add the following code:</p>
<pre><code class="language-javascipt">const express = require(&apos;express&apos;);
const { createEngine } = require(&apos;express-react-views&apos;);

const app = express();
const port = 3000;

app.set(&apos;views&apos;, __dirname + &apos;/views&apos;);
app.set(&apos;view engine&apos;, &apos;jsx&apos;);
app.engine(&apos;jsx&apos;, createEngine());

app.get(&apos;/&apos;, (req, res, next) =&gt; {
  res.render(&apos;index.jsx&apos;, { name: &apos;world&apos; });
});

app.listen(
  port,
  () =&gt; console.log(`\uD83C\uDF0F running at http://localhost:${port}`)
);

</code></pre>
<h2>Step 6</h2>
<p>In the <code>myapp</code> directory, create a <code>views</code> directory with a views template named <code>index.jsx</code></p>
<pre><code>$ mkdir views
$ cd views
$ touch index.jsx
</code></pre>
<p>and add the following code:</p>
<pre><code>const React = require(&apos;react&apos;);

class HelloWorld extends React.Component {
  render() {
    return &lt;div&gt; Hello {this.props.name} &lt;/div&gt;;
  }
}

module.exports = HelloWorld;
</code></pre>
<h2>Step 7</h2>
<p>Run the app from <code>myapp</code> directory with the following command:</p>
<pre><code class="language-javascipt">$ node app.js
</code></pre>
<p>Then, load <a href="http://localhost:3000/">http://localhost:3000/</a> in a browser to see the output.</p>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[👋 Hello world]]></title>
        <id>https://raghibm.com/blog/hello-world/</id>
        <link href="https://raghibm.com/blog/hello-world/">
        </link>
        <updated>2016-11-02T22:00:00Z</updated>
        <summary type="html"><![CDATA[My first blog]]></summary>
        <content type="html"><![CDATA[<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/xNT2CcLjhbI0U/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/mW05nwEyXLP0Y/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/oPyzztuHVnRvO/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/l0JMaNj0xZ6cDFLvq/source.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/3o7TKMt1VVNkHV2PaE/source.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/bcKmIWkUMCjVm/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/s7t6HGxxORyZq/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/ASd0Ukj0y3qMM/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/kZzY6eKKPdIjK/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/l2JHZ0dIcyFo5UQGQ/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/xT5LMPbrjXZr89MdDa/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/i7iQ6DluDnLeE/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/l3vR22DFtLJjbdDYQ/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/MCKQEmHkUyGf6/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
<figure><img src="https://raghibm.com/blog/hello-world/https://media.giphy.com/media/vCKC987OpQAco/giphy.gif" alt="Hello"><figcaption>Hello</figcaption></figure>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[🤔 Reasoning async]]></title>
        <id>https://raghibm.com/blog/reason-async/</id>
        <link href="https://raghibm.com/blog/reason-async/">
        </link>
        <updated>2017-02-03T22:00:00Z</updated>
        <summary type="html"><![CDATA[A good way to reason/remember Async]]></summary>
        <content type="html"><![CDATA[<h1>Hmm&#x2026; async stuffs &#x1F914;</h1>
<h2>Single-threaded</h2>
<blockquote>
<p>E.g Bank with a one teller</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/https://alsanda.files.wordpress.com/2012/08/bank-teller1.jpg" alt="Bank with a one teller"><figcaption>Bank with a one teller</figcaption></figure>
<h2>Event Loop</h2>
<blockquote>
<p>E.g Line to use the bathroom</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/https://barchronicles.files.wordpress.com/2010/10/bathroomline1.jpg" alt="BATHROOM LINE"><figcaption>BATHROOM LINE</figcaption></figure>
<h2>Non-blocking</h2>
<blockquote>
<p>E.g Forgot papers, next person serviced</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/http://media.gettyimages.com/photos/customer-is-served-by-bank-staff-at-a-branch-of-nordea-bank-ab-in-picture-id94937810" alt="Non-blocking Service"><figcaption>Non-blocking Service</figcaption></figure>
<h2>Avoid blocking</h2>
<blockquote>
<p>Don&#x2019;t hog the bathroom</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/http://images.fineartamerica.com/images-medium-large/please-dont-hog-the-bathroom-sylvia-pimental-.jpg" alt="DON&apos;T HOG THE BATHROOM"><figcaption>DON&apos;T HOG THE BATHROOM</figcaption></figure>
<h2>Run to completion</h2>
<blockquote>
<p>Satisfy customer before next</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/http://www.clipartkid.com/images/103/satisfied-customer-clipart-DwLJMJ-clipart.png" alt="SATISFIED &#x1F604;"><figcaption>SATISFIED &#x1F604;</figcaption></figure>
<h2>Cooperative Concurrency</h2>
<blockquote>
<p>Customers play nice</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/https://www.hyken.com/wp-content/uploads/Discount-Coffee-250x300.jpg" alt="CUSTOMER PLAY NICE &#x1F609;"><figcaption>CUSTOMER PLAY NICE &#x1F609;</figcaption></figure>
<h2>Little Programs</h2>
<blockquote>
<p>Customers in line</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/http://blog.clarity.fm/wp-content/uploads/2013/07/customer-line-603x452.jpg" alt="CUSTOMERS IN LINE &#x1F62F;"><figcaption>CUSTOMERS IN LINE &#x1F62F;</figcaption></figure>
<h2>Think explicitly about Asynchronous Seams</h2>
<figure><img src="https://raghibm.com/blog/reason-async/https://dqam6mam97sh3.cloudfront.net/blog/ausl/wp-content/uploads/sites/2/2015/02/homer.png" alt="Think &#x1F914;"><figcaption>Think &#x1F914;</figcaption></figure>
<h2>Timer delay not guaranteed</h2>
<blockquote>
<p>Calendar, Todo list</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/http://bashooka.com/wp-content/uploads/2012/10/calendar_designs-1.jpg" alt="CALENDAR &#x1F4C6;"><figcaption>CALENDAR &#x1F4C6;</figcaption></figure>
<figure><img src="https://raghibm.com/blog/reason-async/https://cdn.theunlockr.com/wp-content/uploads/2012/06/To-Do-List-feature.jpg" alt="TODO LIST &#x1F50F;"><figcaption>TODO LIST &#x1F50F;</figcaption></figure>
<h2>Not always async</h2>
<blockquote>
<p>Quack, waddle but not a duck</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/reason-async/https://s-media-cache-ak0.pinimg.com/236x/eb/f2/b9/ebf2b9588854dd12c39911aa3031e351.jpg" alt="Quack &#x1F425;"><figcaption>Quack &#x1F425;</figcaption></figure>
<h2>Race conditions in order of queue</h2>
<figure><img src="https://raghibm.com/blog/reason-async/http://learnyousomeerlang.com/static/img/fsm_both_ready.png" alt="Race conditon &#x1F3C3;"><figcaption>Race conditon &#x1F3C3;</figcaption></figure>
<figure><img src="https://raghibm.com/blog/reason-async/https://cdn-images-1.medium.com/max/800/1*7IURnff2RaD8iM8yePIw7g.gif" alt="WOOOW &#x1F984;"><figcaption>WOOOW &#x1F984;</figcaption></figure>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[✨ Removing duplicates from "Open With" Mac OSX]]></title>
        <id>https://raghibm.com/blog/remove-duplicates-from-open-with/</id>
        <link href="https://raghibm.com/blog/remove-duplicates-from-open-with/">
        </link>
        <updated>2017-01-28T22:00:00Z</updated>
        <summary type="html"><![CDATA[Remove Duplicates from the “Open With” Right-Click Menu in Mac OS X]]></summary>
        <content type="html"><![CDATA[<p><strong>tldr;</strong></p>
<pre><code class="language-bash">/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/\
LaunchServices.framework/Versions/A/Support/\
lsregister -kill -r -domain local -domain user
</code></pre>
<h2>Creating an alias</h2>
<pre><code class="language-bash"> $ nano .bash_profile
</code></pre>
<pre><code class="language-bash">alias fixow=&apos;/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo &quot;Open With has been rebuilt, Finder will relaunch&quot;&apos;
</code></pre>
<pre><code class="language-bash"> $ fix row
</code></pre>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[✋ Stop Using `sudo` with `npm`!!!]]></title>
        <id>https://raghibm.com/blog/stop-using-sudo-with-npm/</id>
        <link href="https://raghibm.com/blog/stop-using-sudo-with-npm/">
        </link>
        <updated>2017-02-10T22:00:00Z</updated>
        <summary type="html"><![CDATA[Using `sudo` with `npm` messes up your permission]]></summary>
        <content type="html"><![CDATA[<h2>tldr;</h2>
<h3>&#x1F527; Here is a quick fix &#x1F447;</h3>
<pre><code class="language-bash">$&#xA0;sudo chown -R $(whoami) ~/node*                #  ~/node_modules

$&#xA0;sudo chown -R $(whoami) ~/.node*               #  .node-gyp

$&#xA0;sudo chown -R $(whoami) ~/.npm*                # .npm .npmrc

$&#xA0;sudo chown -R $(whoami) /usr/local/*/*node*    # node node_modules

$&#xA0;sudo chown -R $(whoami) /usr/local/*/*npm*     # npm
</code></pre>
<h2>Why ? &#x1F615;</h2>
<blockquote>
<p>Well using sudo messes up your <code>permissions</code> and makes it so that <code>non-sudo</code> installations won&#x2019;t work (i.e. in your <code>~/.npm</code>).</p>
</blockquote>
<figure><img src="https://raghibm.com/blog/stop-using-sudo-with-npm/http://31.media.tumblr.com/35973342a8f51315023d58c249664b00/tumblr_n9hu86QyRL1sedjuto1_400.gif" alt="Stay Awesome! &#x1F60E;"><figcaption>Stay Awesome! &#x1F60E;</figcaption></figure>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔧 Use kill-tabs]]></title>
        <id>https://raghibm.com/blog/use-kill-tabs/</id>
        <link href="https://raghibm.com/blog/use-kill-tabs/">
        </link>
        <updated>2017-02-10T22:00:00Z</updated>
        <summary type="html"><![CDATA[Using `kill-tabs` prevents Chrome from taking up all system resources]]></summary>
        <content type="html"><![CDATA[<h2>tldr;</h2>
<pre><code class="language-javascript">$ npm install --global kill-tabs
</code></pre>
<pre><code>$ kill-tabs --help

  Usage
    $ kill-tabs

  Options
    --no-chromium  Don&apos;t kill tabs in Chromium
    --no-chrome    Don&apos;t kill tabs in Chrome
</code></pre>
<h3>Use <a href="https://chrome.google.com/webstore/detail/reload-all-tabs/lgpdljdpanfecnpindkbnikegohoobci/related">Reload All tabs</a> to resume all the killed tabs</h3>
<hr>
<h2>Why ? &#x1F615;</h2>
<p><img src="https://raghibm.com/blog/use-kill-tabs/tab-abuser.png" alt="tab-abuser">
Being a <code>tab-abuser</code>, I would advice anyone to install up this package and use it to prevent Chrome from taking up all system resources.</p>
<p>It works on <code>macOS</code>, <code>Linux</code> and <code>Windows</code>. &#x1F389;</p>
<figure><img src="https://raghibm.com/blog/use-kill-tabs/http://31.media.tumblr.com/35973342a8f51315023d58c249664b00/tumblr_n9hu86QyRL1sedjuto1_400.gif" alt="Stay Awesome! &#x1F60E;"><figcaption>Stay Awesome! &#x1F60E;</figcaption></figure>
<h2>Reference</h2>
<p><a href="https://github.com/sindresorhus/kill-tabs">kill-tabs</a></p>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔍 Visualization of the 📞 stack]]></title>
        <id>https://raghibm.com/blog/visualize-call-stack/</id>
        <link href="https://raghibm.com/blog/visualize-call-stack/">
        </link>
        <updated>2017-02-07T22:00:00Z</updated>
        <summary type="html"><![CDATA[Visualize the call-stack of printSquare with 10 steps 👌]]></summary>
        <content type="html"><![CDATA[<h2>&quot; <code>one thread</code> === <code>one call stack</code> === <code>one thing at a time</code> &quot;</h2>
<hr>
<pre><code class="language-javascript">// Example
 function multiply(a, b) {
   return a * b;
 }

 function square(n) {
    return multiply(n, n);
}

function printSquare(n) {
   var squared = square(n);
   console.log(squared);
}

printSquare(4);
</code></pre>
<h2>NOTES:</h2>
<ul>
<li>
<p><code>call stack</code> is a <code>data structure</code> which <code>records</code> basically where in the program we are.</p>
</li>
<li>
<p>If we <code>step into</code> a <code>function</code>, we put something on to the <code>stack</code>, if we <code>return</code> from a <code>function</code>, we <code>pop</code> <code>off</code> from the <code>top</code> of <code>stack</code></p>
</li>
</ul>
<hr>
<h2>Let&#x2019;s &#x1F3C3; this file  and  &#x1F50D; the <code>steps</code></h2>
<hr>
<h2>&#x1F528; STEP 1</h2>
<hr>
<pre><code class="language-javascript">  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |      main()     | // &lt;----- There is kind of main function,
 |_________________| //        like the file itself, we push
                     //        that on to the stack.

</code></pre>
<hr>
<h2>&#x1F528; STEP 2</h2>
<hr>
<pre><code class="language-javascript">  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |  printSquare(4) |
 |      main()     | // &lt;-----  It goes through the file &quot;main()&quot;,
 |_________________| //         the &quot;function defination&quot; and once
                     //         we get to &quot;printSquare&quot;. Since
                     //         &quot;printSquare&quot; is a &quot;function call&quot;,
                     //         so we push it onto the stack.
</code></pre>
<hr>
<h2>&#x1F528; STEP 3</h2>
<hr>
<pre><code class="language-javascript">  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |    square(n)    |
 |  printSquare(4) | // &lt;-----  Inside &quot;printSquare&quot;, we immediately
 |     main()      | //         call &quot;square&quot; and push it on
 |_________________| //         to the stack.

</code></pre>
<hr>
<h2>&#x1F528; STEP 4</h2>
<hr>
<pre><code class="language-javascript">  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |  multiply(n, n) |
 |    square(n)    | // &lt;-----  Inside &quot;square&quot;, we  immediately
 |  printSquare(4) | //         call &quot;multiply&quot; and push it on to
 |     main()      | //         the stack.
 |_________________|

</code></pre>
<hr>
<h2>&#x1F528; STEP 5</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |  multiply(n, n) | // &lt;-----  &quot;multiply&quot; returns &quot;a&quot; and &quot;b&quot;, so
 |    square(n)    | //          we &quot;pop&quot; off from stack.
 |  printSquare(4) |
 |     main()      |
 |_________________|


// RESULT (poof - it&apos;s gone &#x1F4A5;)
 _________________
|      STACK      |
|                 |
|                 |
|                 |
|                 |
|                 |
|     *poof*      |
|    square(n)    |
|  printSquare(4) |
|     main()      |
|_________________|

</code></pre>
<hr>
<h2>&#x1F528; STEP 6</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |    square(n)    | // &lt;-----  &quot;square&quot; returned &quot;mutiply(n, n)&quot;,
 |  printSquare(4) | //          so we &quot;pop&quot; it off the stack.
 |     main()      |
 |_________________|


// RESULT (poof - it&apos;s gone &#x1F4A5;)
 _________________
|      STACK      |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|     *poof*      |
|  printSquare(4) |
|     main()      |
|_________________|

</code></pre>
<hr>
<h2>&#x1F528; STEP 7</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |  printSquare(4) | // &lt;----- Inside &quot;printSquare&quot;, it calls
 |     main()      | //        &quot;console.log(squared)&quot;, since it&apos;s a
 |_________________| //        function call we push it to the stack.


// RESULT
 _____________________
|        STACK        |
|                     |
|                     |
|                     |
|                     |
|                     |
|                     |
| console.log(squared)|
|    printSquare(4)   |
|        main()       |
|_____________________|

</code></pre>
<hr>
<h2>&#x1F528; STEP 8</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
 _____________________
|        STACK        |
|                     |
|                     |
|                     |
|                     |
|                     |
|                     |
| console.log(squared)| // &lt;-----  &quot;console.log(squared)&quot; returns the
|    printSquare(4)   | //         &quot;logged square&quot;, so we &quot;pop&quot; it
|        main()       | //         off the stack.
|_____________________|


// RESULT (poof - it&apos;s gone &#x1F4A5;)
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |     *poof*      |
 |  printSquare(4) | //   &lt;-----   Inside &quot;printSquare&quot;, it calls
 |     main()      | //            &quot;console.log(squared)&quot; since it&apos;s
 |_________________| //            a function call we push
                     //            it to the stack.

</code></pre>
<hr>
<h2>&#x1F528; STEP 9</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |  printSquare(4) | //   &lt;-----  &quot;printSquare(n)&quot; has no &quot;return&quot;,
 |     main()      | //            as it&apos;s &quot;implicit&quot; we &quot;pop&quot; it
 |_________________| //            off the stack.


// RESULT (poof - it&apos;s gone &#x1F4A5;)
 _________________
|      STACK      |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|     *poof*      |
|     main()      |
|_________________|

</code></pre>
<hr>
<h2>&#x1F528; STEP 10</h2>
<hr>
<pre><code class="language-javascript">
// INITIAL
  _________________
 |      STACK      |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |                 |
 |     main()      | //   &lt;-----   Since there no &quot;function call&quot;
 |_________________| //            left we &quot;pop&quot; off &quot;main()&quot;
                     //            from the stack.


// RESULT (poof - it&apos;s gone &#x1F4A5;)
 _________________
|      STACK      |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|      *poof*     |
|_________________|

</code></pre>
<hr>
<figure><img src="https://raghibm.com/blog/visualize-call-stack/https://s-media-cache-ak0.pinimg.com/originals/46/02/88/46028823ea0de856a1f7683fa24c4e7f.gif" alt="WOOOW"><figcaption>WOOOW</figcaption></figure>
<h1>More coming up soon. . . &#x1F44A;</h1>
<hr>
<hr>
<h2>REFERENCE</h2>
<p><a href="https://youtu.be/8aGhZQkoFbQ">What the heck is the event loop anyway?</a></p>
]]></content>
        <author>
            <name>Raghib</name>
            <email>abulm@metropolia.fi</email>
            <uri>https://raghibm.com/about</uri>
        </author>
    </entry>
</feed>